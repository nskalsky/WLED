<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
  <title>SkyAware Wi-Fi Settings</title>
  <script src="common.js" async type="text/javascript"></script>
  <script>
    // Helpers from common.js: d, gId, cE, getURL, loadJS, getLoc, H, B
    var scanLoops = 0, preScanSSID = "";
    var maxNetworks = 1; // single SSID only

    function N() {
      var button = gId("scan");
      button.disabled = true;
      button.textContent = "Scanning...";
      fetch(getURL("/json/net"))
        .then(function(r){return r.json();})
        .then(function(json){
          var nets = (json && json.networks) ? json.networks : [];
          nets.sort(function(a,b){return b.rssi - a.rssi;});
          var uniq = [];
          for (var i=0;i<nets.length;i++){
            var seen = false;
            for (var j=0;j<uniq.length;j++){ if (uniq[j].ssid === nets[i].ssid) { seen = true; break; } }
            if (!seen) uniq.push(nets[i]);
          }
          return uniq;
        })
        .then(function(networks){
          if (networks.length === 0 && scanLoops < 10) {
            scanLoops++;
            setTimeout(N, 1000);
            return;
          }
          scanLoops = 0;

          if (networks.length > 0) {
            var cs = d.querySelectorAll("#wifi_entries input[type=text][name^=CS]");
            for (var k=0; k<cs.length; k++) {
              var input = cs[k];
              var found = false;
              var select = cE("select");
              select.id = input.id;
              select.name = input.name;
              select.onchange = function(){ T(this); };
              preScanSSID = input.value;

              while (select.firstChild) { select.removeChild(select.firstChild); }

              for (var i=0; i<networks.length; i++) {
                var opt = cE("option");
                opt.value = networks[i].ssid;
                opt.textContent = networks[i].ssid + " (" + networks[i].rssi + " dBm)";
                if (networks[i].ssid === input.value) { opt.selected = true; found = true; }
                select.appendChild(opt);
              }
              var other = cE("option");
              other.value = "!Cs";
              other.textContent = "Other network...";
              select.appendChild(other);

              if (input.value === "" || input.value === "Your_Network" || found) { input.replaceWith(select); }
              else { select.remove(); }
            }
          }
          button.disabled = false;
          button.textContent = "Scan";
        })
        .catch(function(){
          button.disabled = false;
          button.textContent = "Scan";
        });
    }

    function T(cs) {
      if (!cs || cs.value !== "!Cs") return;
      var input = cE("input");
      input.type = "text";
      input.id = cs.id;
      input.name = cs.name;
      input.maxLength = 32;
      input.value = preScanSSID;
      cs.replaceWith(input);
    }

    function resetWiFi(maxN) {
      if (maxN) maxNetworks = maxN;
      var entries = gId("wifi_entries").children;
      for (var i = entries.length; i > 0; i--) entries[i-1].remove();
      btnWiFi(0);
    }

    function btnWiFi(i) {
      var add = gId("wifi_add");
      var rem = gId("wifi_rem");
      if (add) add.style.display = "none";
      if (rem) rem.style.display = "none";
    }

    // bssid param kept for signature compatibility; unused
    function addWiFi(ssid, pass, _bssid_unused, ip, gw, sn) {
      if (ssid === undefined) ssid = "";
      if (pass === undefined) pass = "";
      if (ip === undefined) ip = 0;
      if (gw === undefined) gw = 0;
      if (sn === undefined) sn = 0x00ffffff;

      var i = gId("wifi_entries").childNodes.length;
      if (i >= maxNetworks) return;

      var block = document.createElement("div");
      block.id = "net" + i;

      block.insertAdjacentHTML("beforeend",
        '<hr class="sml">' +
        'Network name (SSID' + (i===0 ? ', empty to not connect' : '') + '):<br>' +
        '<input type="text" id="CS' + i + '" name="CS' + i + '" maxlength="32" value="' + ssid + '"><br>' +
        'Network password:<br>' +
        '<input type="password" name="PW' + i + '" maxlength="64" value="' + pass + '"><br>' +

        '<label class="adv-toggle">' +
          '<input type="checkbox" id="adv_toggle_' + i + '">' +
          'Show advanced (Static IP / Gateway / Subnet)' +
        '</label><br>' +

        '<div class="advnet" style="display:none">' +
          'Static IP (leave 0.0.0.0 for DHCP' + (i===0 ? ', also used by Ethernet' : '') + '):<br>' +
          '<input name="IP' + i + '0" type="number" class="s" min="0" max="255" value="' + (ip & 0xFF) + '" disabled>.' +
          '<input name="IP' + i + '1" type="number" class="s" min="0" max="255" value="' + ((ip>>8) & 0xFF) + '" disabled>.' +
          '<input name="IP' + i + '2" type="number" class="s" min="0" max="255" value="' + ((ip>>16) & 0xFF) + '" disabled>.' +
          '<input name="IP' + i + '3" type="number" class="s" min="0" max="255" value="' + ((ip>>24) & 0xFF) + '" disabled><br>' +
        '</div>' +

        '<div class="advnet" style="display:none">' +
          'Static gateway:<br>' +
          '<input name="GW' + i + '0" type="number" class="s" min="0" max="255" value="' + (gw & 0xFF) + '" disabled>.' +
          '<input name="GW' + i + '1" type="number" class="s" min="0" max="255" value="' + ((gw>>8) & 0xFF) + '" disabled>.' +
          '<input name="GW' + i + '2" type="number" class="s" min="0" max="255" value="' + ((gw>>16) & 0xFF) + '" disabled>.' +
          '<input name="GW' + i + '3" type="number" class="s" min="0" max="255" value="' + ((gw>>24) & 0xFF) + '" disabled><br>' +
        '</div>' +

        '<div class="advnet" style="display:none">' +
          'Static subnet mask:<br>' +
          '<input name="SN' + i + '0" type="number" class="s" min="0" max="255" value="' + (sn & 0xFF) + '" disabled>.' +
          '<input name="SN' + i + '1" type="number" class="s" min="0" max="255" value="' + ((sn>>8) & 0xFF) + '" disabled>.' +
          '<input name="SN' + i + '2" type="number" class="s" min="0" max="255" value="' + ((sn>>16) & 0xFF) + '" disabled>.' +
          '<input name="SN' + i + '3" type="number" class="s" min="0" max="255" value="' + ((sn>>24) & 0xFF) + '" disabled>' +
        '</div>'
      );

      gId("wifi_entries").appendChild(block);

      var tog = gId("adv_toggle_" + i);
      tog.addEventListener("change", function(){
        var show = this.checked;
        var wrap = gId("net" + i);
        var advs = wrap.querySelectorAll(".advnet");
        for (var x=0;x<advs.length;x++){
          advs[x].style.display = show ? "block" : "none";
          var ins = advs[x].querySelectorAll("input,select");
          for (var y=0;y<ins.length;y++){ ins[y].disabled = !show; }
        }
      });

      btnWiFi(i+1);
    }

    function remWiFi() {
      var entries = gId("wifi_entries").children;
      var i = entries.length;
      if (i < 1) return;
      entries[i-1].remove();
      btnWiFi(i-1);
    }

    function S() {
      getLoc();
      loadJS(getURL("/settings/s.js?p=1"), false);
      // Always set action so submit works regardless of loc
      d.Sf.action = getURL("/settings/wifi");

      // ensure one Wi-Fi block exists
      if (!gId("wifi_entries").children.length) addWiFi();

      // DNS advanced toggle
      var dnsToggle = gId("adv_toggle_dns");
      if (dnsToggle){
        dnsToggle.addEventListener("change", function(){
          var show = this.checked;
          var gs = d.querySelectorAll(".advnet-global");
          for (var i=0;i<gs.length;i++){
            gs[i].style.display = show ? "block" : "none";
            var ins = gs[i].querySelectorAll("input,select");
            for (var j=0;j<ins.length;j++){ ins[j].disabled = !show; }
          }
        });
      }

      setTimeout(tE, 300);
    }

    // compatibility hooks
    var rC = 0;
    function tE(){
      var rlc = gId("rlc");
      if (rlc && d.Sf && d.Sf.RE) rlc.style.display = d.Sf.RE.checked ? "block" : "none";
    }
    function rstR(){ var rml = gId("rml"); if (rml) rml.innerHTML = ""; }
    function aR(id,mac){
      if (!/^[0-9A-F]{12}$/i.test(mac)) return;
      var inputs = d.querySelectorAll("#rml input");
      for (var i=0;i<inputs.length;i++){ if (inputs[i].value === mac) return; }
      var l = gId("rml"), r = cE("div"), inp = cE("input");
      inp.type = "text"; inp.name = id; inp.value = mac; inp.maxLength = 12; inp.minLength = 12;
      r.appendChild(inp);
      var b = cE("button"); b.type = "button"; b.className = "sml"; b.innerText = "-";
      b.onclick = function(){ r.remove(); };
      r.appendChild(b);
      l.appendChild(r);
      rC++;
      var plus = gId("+"); if (plus) plus.style.display = (gId("rml").childElementCount < 10) ? "inline" : "none";
    }
  </script>

  <style>
    /* White background / black text */
    :root { color-scheme: light; }
    html, body { background: #fff !important; color: #000 !important; font-family: sans-serif; }
    input, select, button, label { color: #000 !important; background: #fff !important; border: 1px solid #000 !important; }
    button { cursor: pointer; }
    hr, .sml { border: 0; border-top: 1px solid #000 !important; }
    .toprow button, .helpB button { background: #fff !important; color: #000 !important; border: 1px solid #000 !important; }
    #wifi_add, #wifi_rem { display: none !important; }
    .adv-toggle { display: inline-flex; align-items: center; gap: .5rem; margin: .5rem 0; user-select: none; }
    input.s { width: 3.2rem; text-align: center; }
  </style>
</head>
<body onload="S()">
  <form id="form_s" name="Sf" method="post">
    <div class="toprow">
      <div class="helpB"><button type="button" onclick="H('features/settings/#wifi-settings')">?</button></div>
      <button type="button" onclick="B()">Back</button>
      <button type="submit">Save & Connect</button>
      <hr>
    </div>

    <h2>SkyAware Wi-Fi setup</h2>
    <h3>Connect to your network</h3>

    <button type="button" id="scan" onclick="N()">Scan</button><br>

    <div id="wifi">
      Wireless network
      <div id="wifi_entries"></div>
      <hr class="sml">
      <!-- kept for API parity; hidden via CSS -->
      <button type="button" id="wifi_add" onclick="addWiFi()">+</button>
      <button type="button" id="wifi_rem" onclick="remWiFi()">-</button><br>
    </div>

    mDNS address (leave empty for no mDNS):<br>
    http:// <input type="text" name="CM" maxlength="32"> .local<br>
    Client IP: <span class="sip">Not connected</span><br><br>

    <label class="adv-toggle">
      <input type="checkbox" id="adv_toggle_dns">
      Show advanced (DNS server)
    </label><br>

    <div class="advnet-global" style="display:none">
      DNS server address:<br>
      <input name="D0" type="number" class="s" min="0" max="255" disabled>.
      <input name="D1" type="number" class="s" min="0" max="255" disabled>.
      <input name="D2" type="number" class="s" min="0" max="255" disabled>.
      <input name="D3" type="number" class="s" min="0" max="255" disabled><br>
    </div>

    <hr>
    <button type="button" onclick="B()">Back</button>
    <button type="submit">Save & Connect</button>
  </form>
</body>
</html>
